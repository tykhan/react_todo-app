{"version":3,"sources":["components/Todo/Todo.jsx","components/TodoList/TodoList.jsx","components/TodoFilter/TodoFilter.jsx","App.js","index.js"],"names":["Todo","item","handleStatus","setTodos","className","cn","completed","type","checked","onChange","id","title","onClick","prevTodos","filter","todo","TodoList","items","map","key","TodoFilter","handleFilter","selected","TodoApp","useState","todos","newTodo","setNewTodo","allCompleted","setAllCompleted","setFilter","filteredTodos","useMemo","onSubmit","event","preventDefault","Date","trim","addTodo","placeholder","value","target","length","htmlFor","some","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.57ca7ebb.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nexport const Todo = ({ item, handleStatus, setTodos }) => {\n  const destroyTodo = (id) => {\n    setTodos(prevTodos => prevTodos.filter(todo => todo.id !== id));\n  };\n\n  return (\n    <li className={cn({ completed: item.completed })}>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={item.completed}\n          onChange={() => handleStatus(item.id)}\n        />\n        <label>{item.title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => destroyTodo(item.id)}\n        />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n  );\n};\n\nTodo.propTypes = {\n  item: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  handleStatus: PropTypes.func.isRequired,\n  setTodos: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './TodoList.scss';\nimport { Todo } from '../Todo';\n\nexport const TodoList = ({ items, setTodos }) => {\n  const handleStatus = (id) => {\n    setTodos(prevTodos => prevTodos\n      .map((item) => {\n        if (id !== item.id) {\n          return { ...item };\n        }\n\n        return {\n          ...item,\n          completed: !item.completed,\n        };\n      }));\n  };\n\n  return (\n    <ul className=\"todo-list\">\n      {items.map(item => (\n        <Todo\n          item={item}\n          key={item.id}\n          handleStatus={handleStatus}\n          setTodos={setTodos}\n        />\n      ))}\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  setTodos: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nexport const TodoFilter = ({ handleFilter, filter }) => (\n  <ul className=\"filters\">\n    <li>\n      <button\n        type=\"button\"\n        onClick={() => handleFilter('All')}\n        className={cn({ selected: filter === 'All' })}\n      >\n        All\n      </button>\n    </li>\n\n    <li>\n      <button\n        type=\"button\"\n        onClick={() => handleFilter('Active')}\n        className={cn({ selected: filter === 'Active' })}\n      >\n        Active\n      </button>\n    </li>\n\n    <li>\n      <button\n        type=\"button\"\n        onClick={() => handleFilter('Completed')}\n        className={cn({ selected: filter === 'Completed' })}\n      >\n        Completed\n      </button>\n    </li>\n  </ul>\n);\n\nTodoFilter.propTypes = {\n  handleFilter: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n","import React, { useState, useMemo } from 'react';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\n\nfunction TodoApp() {\n  const [todos, setTodos] = useState([]);\n  const [newTodo, setNewTodo] = useState('');\n  const [allCompleted, setAllCompleted] = useState(false);\n  const [filter, setFilter] = useState('All');\n\n  const filteredTodos = useMemo(() => todos.filter((todo) => {\n    switch (filter) {\n      case 'Completed':\n        return todo.completed;\n      case 'Active':\n        return !todo.completed;\n      default:\n        return todo;\n    }\n  }), [filter, todos]);\n\n  const addTodo = (event) => {\n    event.preventDefault();\n\n    if (!newTodo) {\n      return;\n    }\n\n    setTodos(prevTodos => [...prevTodos,\n      {\n        id: +new Date(),\n        title: newTodo.trim(),\n        completed: false,\n      },\n    ]);\n    setNewTodo('');\n  };\n\n  const checkAllCompleted = () => {\n    setAllCompleted(!allCompleted);\n\n    setTodos(todos.map(todo => ({\n      ...todo,\n      completed: !allCompleted,\n    })));\n  };\n\n  const clearCompleted = () => {\n    setTodos(prevTodos => prevTodos.filter(todo => !todo.completed));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={event => addTodo(event)}>\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={newTodo}\n            onChange={event => setNewTodo(event.target.value)}\n          />\n        </form>\n      </header>\n\n      {todos.length > 0 && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              checked={allCompleted}\n              onChange={() => checkAllCompleted()}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            <TodoList items={filteredTodos} setTodos={setTodos} />\n          </section>\n\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {`${todos.filter(todo => !todo.completed).length} todos left`}\n            </span>\n\n            <TodoFilter handleFilter={setFilter} filter={filter} />\n\n            {todos.some(todo => todo.completed) && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={clearCompleted}\n              >\n                Clear completed\n              </button>\n            )}\n\n          </footer>\n        </>\n      )}\n    </section>\n  );\n}\n\nexport default TodoApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}